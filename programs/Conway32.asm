// bootstrap code
@256
D=A
@SP
M=D
// call Sys.Sys.init 0
@Bootstrap.Sys.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.Sys.init
0;JMP
(Bootstrap.Sys.init$ret.1)
// function Life.Life.new 1
(Life.Life.new)
@SP
A=M
M=0
@SP
M=M+1
// push constant 9
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.alloc 1
@Life.Memory.alloc$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.alloc
0;JMP
(Life.Memory.alloc$ret.1)
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop this 0
@0
D=A
@THIS
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 8
@8
D=A
@THIS
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 8192
@8192
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 1
@1
D=A
@THIS
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 8192
@8192
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.Math.multiply 2
@Life.Math.multiply$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math.multiply
0;JMP
(Life.Math.multiply$ret.2)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop this 2
@2
D=A
@THIS
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 8
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.Array.new 1
@Life.Array.new$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.Array.new
0;JMP
(Life.Array.new$ret.3)
// pop this 3
@3
D=A
@THIS
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 3
@3
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 3
@3
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 3
@3
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 3
@3
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 3
@3
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 3
@3
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 3
@3
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 3
@3
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.new$WHILE_EXP0
(Life.Life.new$WHILE_EXP0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.Math.multiply 2
@Life.Math.multiply$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math.multiply
0;JMP
(Life.Math.multiply$ret.4)
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.new$lt_true.1
D;JLT
@SP
A=M-1
M=0
@Life.Life.new$lt_end.1
0;JMP
(Life.Life.new$lt_true.1)
@SP
A=M-1
M=-1
(Life.Life.new$lt_end.1)
// not
@SP
A=M-1
M=!M
// if-goto Life.Life.new$WHILE_END0
@SP
AM=M-1
D=M
@Life.Life.new$WHILE_END0
D;JNE
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.5)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.6)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto Life.Life.new$WHILE_EXP0
@Life.Life.new$WHILE_EXP0
0;JMP
// label Life.Life.new$WHILE_END0
(Life.Life.new$WHILE_END0)
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Life.Life.initRPentomino 1
@Life.Life.initRPentomino$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Life.Life.initRPentomino
0;JMP
(Life.Life.initRPentomino$ret.7)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Life.Life.initRPentomino 1
(Life.Life.initRPentomino)
@SP
A=M
M=0
@SP
M=M+1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.Math.multiply 2
@Life.Math.multiply$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math.multiply
0;JMP
(Life.Math.multiply$ret.8)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.9)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.10
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.10)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.11
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.11)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.12
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.12)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.13
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.13)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 9
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 4
@4
D=A
@THIS
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 11
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 5
@5
D=A
@THIS
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 6
@6
D=A
@THIS
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop this 7
@7
D=A
@THIS
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Life.Life.countNeighborsFast 5
(Life.Life.countNeighborsFast)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.Math.divide 2
@Life.Math.divide$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math.divide
0;JMP
(Life.Math.divide$ret.14)
// pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.Math.multiply 2
@Life.Math.multiply$ret.15
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math.multiply
0;JMP
(Life.Math.multiply$ret.15)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 2
@2
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 3
@3
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.countNeighborsFast$WHILE_EXP0
(Life.Life.countNeighborsFast$WHILE_EXP0)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 8
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$lt_true.1
D;JLT
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$lt_end.1
0;JMP
(Life.Life.countNeighborsFast$lt_true.1)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$lt_end.1)
// not
@SP
A=M-1
M=!M
// if-goto Life.Life.countNeighborsFast$WHILE_END0
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$WHILE_END0
D;JNE
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 3
@3
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 4
@4
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$eq_true.2
D;JEQ
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$eq_end.2
0;JMP
(Life.Life.countNeighborsFast$eq_true.2)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$eq_end.2)
// if-goto Life.Life.countNeighborsFast$IF_TRUE0
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE0
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE0
@Life.Life.countNeighborsFast$IF_FALSE0
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE0
(Life.Life.countNeighborsFast$IF_TRUE0)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$gt_true.3
D;JGT
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$gt_end.3
0;JMP
(Life.Life.countNeighborsFast$gt_true.3)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$gt_end.3)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$gt_true.4
D;JGT
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$gt_end.4
0;JMP
(Life.Life.countNeighborsFast$gt_true.4)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$gt_end.4)
// and
@SP
AM=M-1
D=M
A=A-1
M=D&M
// if-goto Life.Life.countNeighborsFast$IF_TRUE1
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE1
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE1
@Life.Life.countNeighborsFast$IF_FALSE1
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE1
(Life.Life.countNeighborsFast$IF_TRUE1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Memory.Memory.peek 1
@Life.Memory.peek$ret.16
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.peek
0;JMP
(Life.Memory.peek$ret.16)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.countNeighborsFast$IF_FALSE1
(Life.Life.countNeighborsFast$IF_FALSE1)
// label Life.Life.countNeighborsFast$IF_FALSE0
(Life.Life.countNeighborsFast$IF_FALSE0)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$eq_true.5
D;JEQ
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$eq_end.5
0;JMP
(Life.Life.countNeighborsFast$eq_true.5)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$eq_end.5)
// if-goto Life.Life.countNeighborsFast$IF_TRUE2
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE2
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE2
@Life.Life.countNeighborsFast$IF_FALSE2
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE2
(Life.Life.countNeighborsFast$IF_TRUE2)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$gt_true.6
D;JGT
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$gt_end.6
0;JMP
(Life.Life.countNeighborsFast$gt_true.6)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$gt_end.6)
// if-goto Life.Life.countNeighborsFast$IF_TRUE3
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE3
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE3
@Life.Life.countNeighborsFast$IF_FALSE3
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE3
(Life.Life.countNeighborsFast$IF_TRUE3)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Memory.Memory.peek 1
@Life.Memory.peek$ret.17
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.peek
0;JMP
(Life.Memory.peek$ret.17)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.countNeighborsFast$IF_FALSE3
(Life.Life.countNeighborsFast$IF_FALSE3)
// label Life.Life.countNeighborsFast$IF_FALSE2
(Life.Life.countNeighborsFast$IF_FALSE2)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$eq_true.7
D;JEQ
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$eq_end.7
0;JMP
(Life.Life.countNeighborsFast$eq_true.7)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$eq_end.7)
// if-goto Life.Life.countNeighborsFast$IF_TRUE4
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE4
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE4
@Life.Life.countNeighborsFast$IF_FALSE4
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE4
(Life.Life.countNeighborsFast$IF_TRUE4)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$gt_true.8
D;JGT
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$gt_end.8
0;JMP
(Life.Life.countNeighborsFast$gt_true.8)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$gt_end.8)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$lt_true.9
D;JLT
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$lt_end.9
0;JMP
(Life.Life.countNeighborsFast$lt_true.9)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$lt_end.9)
// and
@SP
AM=M-1
D=M
A=A-1
M=D&M
// if-goto Life.Life.countNeighborsFast$IF_TRUE5
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE5
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE5
@Life.Life.countNeighborsFast$IF_FALSE5
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE5
(Life.Life.countNeighborsFast$IF_TRUE5)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Memory.Memory.peek 1
@Life.Memory.peek$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.peek
0;JMP
(Life.Memory.peek$ret.18)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.countNeighborsFast$IF_FALSE5
(Life.Life.countNeighborsFast$IF_FALSE5)
// label Life.Life.countNeighborsFast$IF_FALSE4
(Life.Life.countNeighborsFast$IF_FALSE4)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$eq_true.10
D;JEQ
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$eq_end.10
0;JMP
(Life.Life.countNeighborsFast$eq_true.10)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$eq_end.10)
// if-goto Life.Life.countNeighborsFast$IF_TRUE6
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE6
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE6
@Life.Life.countNeighborsFast$IF_FALSE6
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE6
(Life.Life.countNeighborsFast$IF_TRUE6)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$gt_true.11
D;JGT
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$gt_end.11
0;JMP
(Life.Life.countNeighborsFast$gt_true.11)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$gt_end.11)
// if-goto Life.Life.countNeighborsFast$IF_TRUE7
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE7
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE7
@Life.Life.countNeighborsFast$IF_FALSE7
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE7
(Life.Life.countNeighborsFast$IF_TRUE7)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Memory.Memory.peek 1
@Life.Memory.peek$ret.19
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.peek
0;JMP
(Life.Memory.peek$ret.19)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.countNeighborsFast$IF_FALSE7
(Life.Life.countNeighborsFast$IF_FALSE7)
// label Life.Life.countNeighborsFast$IF_FALSE6
(Life.Life.countNeighborsFast$IF_FALSE6)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$eq_true.12
D;JEQ
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$eq_end.12
0;JMP
(Life.Life.countNeighborsFast$eq_true.12)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$eq_end.12)
// if-goto Life.Life.countNeighborsFast$IF_TRUE8
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE8
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE8
@Life.Life.countNeighborsFast$IF_FALSE8
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE8
(Life.Life.countNeighborsFast$IF_TRUE8)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$lt_true.13
D;JLT
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$lt_end.13
0;JMP
(Life.Life.countNeighborsFast$lt_true.13)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$lt_end.13)
// if-goto Life.Life.countNeighborsFast$IF_TRUE9
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE9
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE9
@Life.Life.countNeighborsFast$IF_FALSE9
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE9
(Life.Life.countNeighborsFast$IF_TRUE9)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Memory.Memory.peek 1
@Life.Memory.peek$ret.20
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.peek
0;JMP
(Life.Memory.peek$ret.20)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.countNeighborsFast$IF_FALSE9
(Life.Life.countNeighborsFast$IF_FALSE9)
// label Life.Life.countNeighborsFast$IF_FALSE8
(Life.Life.countNeighborsFast$IF_FALSE8)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$eq_true.14
D;JEQ
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$eq_end.14
0;JMP
(Life.Life.countNeighborsFast$eq_true.14)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$eq_end.14)
// if-goto Life.Life.countNeighborsFast$IF_TRUE10
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE10
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE10
@Life.Life.countNeighborsFast$IF_FALSE10
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE10
(Life.Life.countNeighborsFast$IF_TRUE10)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$lt_true.15
D;JLT
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$lt_end.15
0;JMP
(Life.Life.countNeighborsFast$lt_true.15)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$lt_end.15)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$gt_true.16
D;JGT
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$gt_end.16
0;JMP
(Life.Life.countNeighborsFast$gt_true.16)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$gt_end.16)
// and
@SP
AM=M-1
D=M
A=A-1
M=D&M
// if-goto Life.Life.countNeighborsFast$IF_TRUE11
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE11
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE11
@Life.Life.countNeighborsFast$IF_FALSE11
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE11
(Life.Life.countNeighborsFast$IF_TRUE11)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Memory.Memory.peek 1
@Life.Memory.peek$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.peek
0;JMP
(Life.Memory.peek$ret.21)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.countNeighborsFast$IF_FALSE11
(Life.Life.countNeighborsFast$IF_FALSE11)
// label Life.Life.countNeighborsFast$IF_FALSE10
(Life.Life.countNeighborsFast$IF_FALSE10)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$eq_true.17
D;JEQ
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$eq_end.17
0;JMP
(Life.Life.countNeighborsFast$eq_true.17)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$eq_end.17)
// if-goto Life.Life.countNeighborsFast$IF_TRUE12
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE12
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE12
@Life.Life.countNeighborsFast$IF_FALSE12
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE12
(Life.Life.countNeighborsFast$IF_TRUE12)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$lt_true.18
D;JLT
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$lt_end.18
0;JMP
(Life.Life.countNeighborsFast$lt_true.18)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$lt_end.18)
// if-goto Life.Life.countNeighborsFast$IF_TRUE13
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE13
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE13
@Life.Life.countNeighborsFast$IF_FALSE13
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE13
(Life.Life.countNeighborsFast$IF_TRUE13)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Memory.Memory.peek 1
@Life.Memory.peek$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.peek
0;JMP
(Life.Memory.peek$ret.22)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.countNeighborsFast$IF_FALSE13
(Life.Life.countNeighborsFast$IF_FALSE13)
// label Life.Life.countNeighborsFast$IF_FALSE12
(Life.Life.countNeighborsFast$IF_FALSE12)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$eq_true.19
D;JEQ
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$eq_end.19
0;JMP
(Life.Life.countNeighborsFast$eq_true.19)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$eq_end.19)
// if-goto Life.Life.countNeighborsFast$IF_TRUE14
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE14
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE14
@Life.Life.countNeighborsFast$IF_FALSE14
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE14
(Life.Life.countNeighborsFast$IF_TRUE14)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$lt_true.20
D;JLT
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$lt_end.20
0;JMP
(Life.Life.countNeighborsFast$lt_true.20)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$lt_end.20)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.countNeighborsFast$lt_true.21
D;JLT
@SP
A=M-1
M=0
@Life.Life.countNeighborsFast$lt_end.21
0;JMP
(Life.Life.countNeighborsFast$lt_true.21)
@SP
A=M-1
M=-1
(Life.Life.countNeighborsFast$lt_end.21)
// and
@SP
AM=M-1
D=M
A=A-1
M=D&M
// if-goto Life.Life.countNeighborsFast$IF_TRUE15
@SP
AM=M-1
D=M
@Life.Life.countNeighborsFast$IF_TRUE15
D;JNE
// goto Life.Life.countNeighborsFast$IF_FALSE15
@Life.Life.countNeighborsFast$IF_FALSE15
0;JMP
// label Life.Life.countNeighborsFast$IF_TRUE15
(Life.Life.countNeighborsFast$IF_TRUE15)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Memory.Memory.peek 1
@Life.Memory.peek$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.peek
0;JMP
(Life.Memory.peek$ret.23)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.countNeighborsFast$IF_FALSE15
(Life.Life.countNeighborsFast$IF_FALSE15)
// label Life.Life.countNeighborsFast$IF_FALSE14
(Life.Life.countNeighborsFast$IF_FALSE14)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 3
@3
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto Life.Life.countNeighborsFast$WHILE_EXP0
@Life.Life.countNeighborsFast$WHILE_EXP0
0;JMP
// label Life.Life.countNeighborsFast$WHILE_END0
(Life.Life.countNeighborsFast$WHILE_END0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Life.Life.updateOptimized 13
(Life.Life.updateOptimized)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 4
@4
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 9
@9
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 9
@9
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$lt_true.1
D;JLT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$lt_end.1
0;JMP
(Life.Life.updateOptimized$lt_true.1)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$lt_end.1)
// if-goto Life.Life.updateOptimized$IF_TRUE0
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE0
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE0
@Life.Life.updateOptimized$IF_FALSE0
0;JMP
// label Life.Life.updateOptimized$IF_TRUE0
(Life.Life.updateOptimized$IF_TRUE0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 9
@9
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$IF_FALSE0
(Life.Life.updateOptimized$IF_FALSE0)
// push this 5
@5
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 10
@10
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 10
@10
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$gt_true.2
D;JGT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$gt_end.2
0;JMP
(Life.Life.updateOptimized$gt_true.2)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$gt_end.2)
// if-goto Life.Life.updateOptimized$IF_TRUE1
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE1
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE1
@Life.Life.updateOptimized$IF_FALSE1
0;JMP
// label Life.Life.updateOptimized$IF_TRUE1
(Life.Life.updateOptimized$IF_TRUE1)
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 10
@10
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$IF_FALSE1
(Life.Life.updateOptimized$IF_FALSE1)
// push this 6
@6
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 11
@11
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 11
@11
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$lt_true.3
D;JLT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$lt_end.3
0;JMP
(Life.Life.updateOptimized$lt_true.3)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$lt_end.3)
// if-goto Life.Life.updateOptimized$IF_TRUE2
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE2
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE2
@Life.Life.updateOptimized$IF_FALSE2
0;JMP
// label Life.Life.updateOptimized$IF_TRUE2
(Life.Life.updateOptimized$IF_TRUE2)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 11
@11
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$IF_FALSE2
(Life.Life.updateOptimized$IF_FALSE2)
// push this 7
@7
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 12
@12
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 12
@12
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$gt_true.4
D;JGT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$gt_end.4
0;JMP
(Life.Life.updateOptimized$gt_true.4)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$gt_end.4)
// if-goto Life.Life.updateOptimized$IF_TRUE3
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE3
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE3
@Life.Life.updateOptimized$IF_FALSE3
0;JMP
// label Life.Life.updateOptimized$IF_TRUE3
(Life.Life.updateOptimized$IF_TRUE3)
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 12
@12
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$IF_FALSE3
(Life.Life.updateOptimized$IF_FALSE3)
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 5
@5
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// pop local 6
@6
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 7
@7
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// pop local 8
@8
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 9
@9
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$WHILE_EXP0
(Life.Life.updateOptimized$WHILE_EXP0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 10
@10
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$lt_true.5
D;JLT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$lt_end.5
0;JMP
(Life.Life.updateOptimized$lt_true.5)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$lt_end.5)
// not
@SP
A=M-1
M=!M
// if-goto Life.Life.updateOptimized$WHILE_END0
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$WHILE_END0
D;JNE
// push local 11
@11
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$WHILE_EXP1
(Life.Life.updateOptimized$WHILE_EXP1)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 12
@12
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$lt_true.6
D;JLT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$lt_end.6
0;JMP
(Life.Life.updateOptimized$lt_true.6)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$lt_end.6)
// not
@SP
A=M-1
M=!M
// if-goto Life.Life.updateOptimized$WHILE_END1
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$WHILE_END1
D;JNE
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.Math.multiply 2
@Life.Math.multiply$ret.24
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math.multiply
0;JMP
(Life.Math.multiply$ret.24)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 2
@2
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Life.Life.countNeighborsFast 2
@Life.Life.countNeighborsFast$ret.25
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Life.Life.countNeighborsFast
0;JMP
(Life.Life.countNeighborsFast$ret.25)
// pop local 3
@3
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Memory.Memory.peek 1
@Life.Memory.peek$ret.26
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.peek
0;JMP
(Life.Memory.peek$ret.26)
// pop local 4
@4
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$eq_true.7
D;JEQ
@SP
A=M-1
M=0
@Life.Life.updateOptimized$eq_end.7
0;JMP
(Life.Life.updateOptimized$eq_true.7)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$eq_end.7)
// if-goto Life.Life.updateOptimized$IF_TRUE4
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE4
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE4
@Life.Life.updateOptimized$IF_FALSE4
0;JMP
// label Life.Life.updateOptimized$IF_TRUE4
(Life.Life.updateOptimized$IF_TRUE4)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$eq_true.8
D;JEQ
@SP
A=M-1
M=0
@Life.Life.updateOptimized$eq_end.8
0;JMP
(Life.Life.updateOptimized$eq_true.8)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$eq_end.8)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$eq_true.9
D;JEQ
@SP
A=M-1
M=0
@Life.Life.updateOptimized$eq_end.9
0;JMP
(Life.Life.updateOptimized$eq_true.9)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$eq_end.9)
// or
@SP
AM=M-1
D=M
A=A-1
M=D|M
// if-goto Life.Life.updateOptimized$IF_TRUE5
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE5
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE5
@Life.Life.updateOptimized$IF_FALSE5
0;JMP
// label Life.Life.updateOptimized$IF_TRUE5
(Life.Life.updateOptimized$IF_TRUE5)
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.27
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.27)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 5
@5
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$lt_true.10
D;JLT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$lt_end.10
0;JMP
(Life.Life.updateOptimized$lt_true.10)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$lt_end.10)
// if-goto Life.Life.updateOptimized$IF_TRUE6
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE6
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE6
@Life.Life.updateOptimized$IF_FALSE6
0;JMP
// label Life.Life.updateOptimized$IF_TRUE6
(Life.Life.updateOptimized$IF_TRUE6)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 5
@5
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$IF_FALSE6
(Life.Life.updateOptimized$IF_FALSE6)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 6
@6
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$gt_true.11
D;JGT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$gt_end.11
0;JMP
(Life.Life.updateOptimized$gt_true.11)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$gt_end.11)
// if-goto Life.Life.updateOptimized$IF_TRUE7
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE7
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE7
@Life.Life.updateOptimized$IF_FALSE7
0;JMP
// label Life.Life.updateOptimized$IF_TRUE7
(Life.Life.updateOptimized$IF_TRUE7)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 6
@6
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$IF_FALSE7
(Life.Life.updateOptimized$IF_FALSE7)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 7
@7
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$lt_true.12
D;JLT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$lt_end.12
0;JMP
(Life.Life.updateOptimized$lt_true.12)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$lt_end.12)
// if-goto Life.Life.updateOptimized$IF_TRUE8
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE8
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE8
@Life.Life.updateOptimized$IF_FALSE8
0;JMP
// label Life.Life.updateOptimized$IF_TRUE8
(Life.Life.updateOptimized$IF_TRUE8)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 7
@7
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$IF_FALSE8
(Life.Life.updateOptimized$IF_FALSE8)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 8
@8
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$gt_true.13
D;JGT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$gt_end.13
0;JMP
(Life.Life.updateOptimized$gt_true.13)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$gt_end.13)
// if-goto Life.Life.updateOptimized$IF_TRUE9
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE9
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE9
@Life.Life.updateOptimized$IF_FALSE9
0;JMP
// label Life.Life.updateOptimized$IF_TRUE9
(Life.Life.updateOptimized$IF_TRUE9)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 8
@8
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$IF_FALSE9
(Life.Life.updateOptimized$IF_FALSE9)
// goto Life.Life.updateOptimized$IF_END5
@Life.Life.updateOptimized$IF_END5
0;JMP
// label Life.Life.updateOptimized$IF_FALSE5
(Life.Life.updateOptimized$IF_FALSE5)
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.28
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.28)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// label Life.Life.updateOptimized$IF_END5
(Life.Life.updateOptimized$IF_END5)
// goto Life.Life.updateOptimized$IF_END4
@Life.Life.updateOptimized$IF_END4
0;JMP
// label Life.Life.updateOptimized$IF_FALSE4
(Life.Life.updateOptimized$IF_FALSE4)
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$eq_true.14
D;JEQ
@SP
A=M-1
M=0
@Life.Life.updateOptimized$eq_end.14
0;JMP
(Life.Life.updateOptimized$eq_true.14)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$eq_end.14)
// if-goto Life.Life.updateOptimized$IF_TRUE10
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE10
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE10
@Life.Life.updateOptimized$IF_FALSE10
0;JMP
// label Life.Life.updateOptimized$IF_TRUE10
(Life.Life.updateOptimized$IF_TRUE10)
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.29
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.29)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 5
@5
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$lt_true.15
D;JLT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$lt_end.15
0;JMP
(Life.Life.updateOptimized$lt_true.15)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$lt_end.15)
// if-goto Life.Life.updateOptimized$IF_TRUE11
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE11
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE11
@Life.Life.updateOptimized$IF_FALSE11
0;JMP
// label Life.Life.updateOptimized$IF_TRUE11
(Life.Life.updateOptimized$IF_TRUE11)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 5
@5
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$IF_FALSE11
(Life.Life.updateOptimized$IF_FALSE11)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 6
@6
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$gt_true.16
D;JGT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$gt_end.16
0;JMP
(Life.Life.updateOptimized$gt_true.16)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$gt_end.16)
// if-goto Life.Life.updateOptimized$IF_TRUE12
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE12
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE12
@Life.Life.updateOptimized$IF_FALSE12
0;JMP
// label Life.Life.updateOptimized$IF_TRUE12
(Life.Life.updateOptimized$IF_TRUE12)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 6
@6
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$IF_FALSE12
(Life.Life.updateOptimized$IF_FALSE12)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 7
@7
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$lt_true.17
D;JLT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$lt_end.17
0;JMP
(Life.Life.updateOptimized$lt_true.17)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$lt_end.17)
// if-goto Life.Life.updateOptimized$IF_TRUE13
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE13
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE13
@Life.Life.updateOptimized$IF_FALSE13
0;JMP
// label Life.Life.updateOptimized$IF_TRUE13
(Life.Life.updateOptimized$IF_TRUE13)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 7
@7
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$IF_FALSE13
(Life.Life.updateOptimized$IF_FALSE13)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 8
@8
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$gt_true.18
D;JGT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$gt_end.18
0;JMP
(Life.Life.updateOptimized$gt_true.18)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$gt_end.18)
// if-goto Life.Life.updateOptimized$IF_TRUE14
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE14
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE14
@Life.Life.updateOptimized$IF_FALSE14
0;JMP
// label Life.Life.updateOptimized$IF_TRUE14
(Life.Life.updateOptimized$IF_TRUE14)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 8
@8
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$IF_FALSE14
(Life.Life.updateOptimized$IF_FALSE14)
// goto Life.Life.updateOptimized$IF_END10
@Life.Life.updateOptimized$IF_END10
0;JMP
// label Life.Life.updateOptimized$IF_FALSE10
(Life.Life.updateOptimized$IF_FALSE10)
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.30
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.30)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// label Life.Life.updateOptimized$IF_END10
(Life.Life.updateOptimized$IF_END10)
// label Life.Life.updateOptimized$IF_END4
(Life.Life.updateOptimized$IF_END4)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto Life.Life.updateOptimized$WHILE_EXP1
@Life.Life.updateOptimized$WHILE_EXP1
0;JMP
// label Life.Life.updateOptimized$WHILE_END1
(Life.Life.updateOptimized$WHILE_END1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto Life.Life.updateOptimized$WHILE_EXP0
@Life.Life.updateOptimized$WHILE_EXP0
0;JMP
// label Life.Life.updateOptimized$WHILE_END0
(Life.Life.updateOptimized$WHILE_END0)
// push local 5
@5
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop this 4
@4
D=A
@THIS
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 6
@6
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop this 5
@5
D=A
@THIS
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 7
@7
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop this 6
@6
D=A
@THIS
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 8
@8
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop this 7
@7
D=A
@THIS
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 5
@5
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$gt_true.19
D;JGT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$gt_end.19
0;JMP
(Life.Life.updateOptimized$gt_true.19)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$gt_end.19)
// if-goto Life.Life.updateOptimized$IF_TRUE15
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE15
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE15
@Life.Life.updateOptimized$IF_FALSE15
0;JMP
// label Life.Life.updateOptimized$IF_TRUE15
(Life.Life.updateOptimized$IF_TRUE15)
// push local 9
@9
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$WHILE_EXP2
(Life.Life.updateOptimized$WHILE_EXP2)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 10
@10
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$lt_true.20
D;JLT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$lt_end.20
0;JMP
(Life.Life.updateOptimized$lt_true.20)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$lt_end.20)
// not
@SP
A=M-1
M=!M
// if-goto Life.Life.updateOptimized$WHILE_END2
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$WHILE_END2
D;JNE
// push local 11
@11
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.updateOptimized$WHILE_EXP3
(Life.Life.updateOptimized$WHILE_EXP3)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 12
@12
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Life.Life.updateOptimized$lt_true.21
D;JLT
@SP
A=M-1
M=0
@Life.Life.updateOptimized$lt_end.21
0;JMP
(Life.Life.updateOptimized$lt_true.21)
@SP
A=M-1
M=-1
(Life.Life.updateOptimized$lt_end.21)
// not
@SP
A=M-1
M=!M
// if-goto Life.Life.updateOptimized$WHILE_END3
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$WHILE_END3
D;JNE
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push this 0
@0
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.Math.multiply 2
@Life.Math.multiply$ret.31
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math.multiply
0;JMP
(Life.Math.multiply$ret.31)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 2
@2
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 1
@1
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push this 2
@2
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Memory.Memory.peek 1
@Life.Memory.peek$ret.32
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.peek
0;JMP
(Life.Memory.peek$ret.32)
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.33
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.33)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto Life.Life.updateOptimized$WHILE_EXP3
@Life.Life.updateOptimized$WHILE_EXP3
0;JMP
// label Life.Life.updateOptimized$WHILE_END3
(Life.Life.updateOptimized$WHILE_END3)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto Life.Life.updateOptimized$WHILE_EXP2
@Life.Life.updateOptimized$WHILE_EXP2
0;JMP
// label Life.Life.updateOptimized$WHILE_END2
(Life.Life.updateOptimized$WHILE_END2)
// label Life.Life.updateOptimized$IF_FALSE15
(Life.Life.updateOptimized$IF_FALSE15)
// push this 8
@8
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// if-goto Life.Life.updateOptimized$IF_TRUE16
@SP
AM=M-1
D=M
@Life.Life.updateOptimized$IF_TRUE16
D;JNE
// goto Life.Life.updateOptimized$IF_FALSE16
@Life.Life.updateOptimized$IF_FALSE16
0;JMP
// label Life.Life.updateOptimized$IF_TRUE16
(Life.Life.updateOptimized$IF_TRUE16)
// push constant 8020
@8020
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 4
@4
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.34
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.34)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 8021
@8021
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 5
@5
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.35
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.35)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 8022
@8022
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 6
@6
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.36
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.36)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 8023
@8023
D=A
@SP
A=M
M=D
@SP
M=M+1
// push this 7
@7
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.37
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.37)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// label Life.Life.updateOptimized$IF_FALSE16
(Life.Life.updateOptimized$IF_FALSE16)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Life.Life.run 1
(Life.Life.run)
@SP
A=M
M=0
@SP
M=M+1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Life.Life.run$WHILE_EXP0
(Life.Life.run$WHILE_EXP0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto Life.Life.run$WHILE_END0
@SP
AM=M-1
D=M
@Life.Life.run$WHILE_END0
D;JNE
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Life.Life.updateOptimized 1
@Life.Life.updateOptimized$ret.38
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Life.Life.updateOptimized
0;JMP
(Life.Life.updateOptimized$ret.38)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push this 8
@8
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// if-goto Life.Life.run$IF_TRUE0
@SP
AM=M-1
D=M
@Life.Life.run$IF_TRUE0
D;JNE
// goto Life.Life.run$IF_FALSE0
@Life.Life.run$IF_FALSE0
0;JMP
// label Life.Life.run$IF_TRUE0
(Life.Life.run$IF_TRUE0)
// push constant 8000
@8000
D=A
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.poke 2
@Life.Memory.poke$ret.39
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.poke
0;JMP
(Life.Memory.poke$ret.39)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// label Life.Life.run$IF_FALSE0
(Life.Life.run$IF_FALSE0)
// goto Life.Life.run$WHILE_EXP0
@Life.Life.run$WHILE_EXP0
0;JMP
// label Life.Life.run$WHILE_END0
(Life.Life.run$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Life.Life.dispose 0
(Life.Life.dispose)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push this 3
@3
D=A
@THIS
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.deAlloc 1
@Life.Memory.deAlloc$ret.40
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.deAlloc
0;JMP
(Life.Memory.deAlloc$ret.40)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.deAlloc 1
@Life.Memory.deAlloc$ret.41
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.deAlloc
0;JMP
(Life.Memory.deAlloc$ret.41)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.Math.init 0
(Math.Math.init)
// push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Array.Array.new 1
@Math.Array.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.Array.new
0;JMP
(Math.Array.new$ret.1)
// pop static 0
@SP
AM=M-1
D=M
@Math.0
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 8
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 5
@5
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 64
@64
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 128
@128
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 8
@8
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 256
@256
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 9
@9
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 512
@512
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 10
@10
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1024
@1024
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 11
@11
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 4096
@4096
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 13
@13
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 8192
@8192
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 14
@14
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 16384
@16384
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 16384
@16384
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 16384
@16384
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.Math.multiply 2
(Math.Math.multiply)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math.multiply$lt_true.1
D;JLT
@SP
A=M-1
M=0
@Math.Math.multiply$lt_end.1
0;JMP
(Math.Math.multiply$lt_true.1)
@SP
A=M-1
M=-1
(Math.Math.multiply$lt_end.1)
// if-goto Math.Math.multiply$IF_TRUE0
@SP
AM=M-1
D=M
@Math.Math.multiply$IF_TRUE0
D;JNE
// goto Math.Math.multiply$IF_FALSE0
@Math.Math.multiply$IF_FALSE0
0;JMP
// label Math.Math.multiply$IF_TRUE0
(Math.Math.multiply$IF_TRUE0)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// pop argument 1
@1
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// pop argument 0
@0
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Math.Math.multiply$IF_FALSE0
(Math.Math.multiply$IF_FALSE0)
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Math.Math.multiply$WHILE_EXP0
(Math.Math.multiply$WHILE_EXP0)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math.multiply$gt_true.2
D;JGT
@SP
A=M-1
M=0
@Math.Math.multiply$gt_end.2
0;JMP
(Math.Math.multiply$gt_true.2)
@SP
A=M-1
M=-1
(Math.Math.multiply$gt_end.2)
// not
@SP
A=M-1
M=!M
// if-goto Math.Math.multiply$WHILE_END0
@SP
AM=M-1
D=M
@Math.Math.multiply$WHILE_END0
D;JNE
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// and
@SP
AM=M-1
D=M
A=A-1
M=D&M
// if-goto Math.Math.multiply$IF_TRUE1
@SP
AM=M-1
D=M
@Math.Math.multiply$IF_TRUE1
D;JNE
// goto Math.Math.multiply$IF_FALSE1
@Math.Math.multiply$IF_FALSE1
0;JMP
// label Math.Math.multiply$IF_TRUE1
(Math.Math.multiply$IF_TRUE1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Math.Math.multiply$IF_FALSE1
(Math.Math.multiply$IF_FALSE1)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop argument 0
@0
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto Math.Math.multiply$WHILE_EXP0
@Math.Math.multiply$WHILE_EXP0
0;JMP
// label Math.Math.multiply$WHILE_END0
(Math.Math.multiply$WHILE_END0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.Math.divide 1
(Math.Math.divide)
@SP
A=M
M=0
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math.divide$eq_true.1
D;JEQ
@SP
A=M-1
M=0
@Math.Math.divide$eq_end.1
0;JMP
(Math.Math.divide$eq_true.1)
@SP
A=M-1
M=-1
(Math.Math.divide$eq_end.1)
// if-goto Math.Math.divide$IF_TRUE0
@SP
AM=M-1
D=M
@Math.Math.divide$IF_TRUE0
D;JNE
// goto Math.Math.divide$IF_FALSE0
@Math.Math.divide$IF_FALSE0
0;JMP
// label Math.Math.divide$IF_TRUE0
(Math.Math.divide$IF_TRUE0)
// push constant 3
@3
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.Sys.error 1
@Math.Sys.error$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.Sys.error
0;JMP
(Math.Sys.error$ret.2)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// label Math.Math.divide$IF_FALSE0
(Math.Math.divide$IF_FALSE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.Math.abs 1
@Math.Math.abs$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math.abs
0;JMP
(Math.Math.abs$ret.3)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.Math.abs 1
@Math.Math.abs$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math.abs
0;JMP
(Math.Math.abs$ret.4)
// call Math.Math._div 2
@Math.Math._div$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math._div
0;JMP
(Math.Math._div$ret.5)
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math.divide$lt_true.2
D;JLT
@SP
A=M-1
M=0
@Math.Math.divide$lt_end.2
0;JMP
(Math.Math.divide$lt_true.2)
@SP
A=M-1
M=-1
(Math.Math.divide$lt_end.2)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math.divide$lt_true.3
D;JLT
@SP
A=M-1
M=0
@Math.Math.divide$lt_end.3
0;JMP
(Math.Math.divide$lt_true.3)
@SP
A=M-1
M=-1
(Math.Math.divide$lt_end.3)
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math.divide$eq_true.4
D;JEQ
@SP
A=M-1
M=0
@Math.Math.divide$eq_end.4
0;JMP
(Math.Math.divide$eq_true.4)
@SP
A=M-1
M=-1
(Math.Math.divide$eq_end.4)
// if-goto Math.Math.divide$IF_TRUE1
@SP
AM=M-1
D=M
@Math.Math.divide$IF_TRUE1
D;JNE
// goto Math.Math.divide$IF_FALSE1
@Math.Math.divide$IF_FALSE1
0;JMP
// label Math.Math.divide$IF_TRUE1
(Math.Math.divide$IF_TRUE1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// goto Math.Math.divide$IF_END1
@Math.Math.divide$IF_END1
0;JMP
// label Math.Math.divide$IF_FALSE1
(Math.Math.divide$IF_FALSE1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// label Math.Math.divide$IF_END1
(Math.Math.divide$IF_END1)
// function Math.Math._div 2
(Math.Math._div)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math._div$lt_true.1
D;JLT
@SP
A=M-1
M=0
@Math.Math._div$lt_end.1
0;JMP
(Math.Math._div$lt_true.1)
@SP
A=M-1
M=-1
(Math.Math._div$lt_end.1)
// if-goto Math.Math._div$IF_TRUE0
@SP
AM=M-1
D=M
@Math.Math._div$IF_TRUE0
D;JNE
// goto Math.Math._div$IF_FALSE0
@Math.Math._div$IF_FALSE0
0;JMP
// label Math.Math._div$IF_TRUE0
(Math.Math._div$IF_TRUE0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// label Math.Math._div$IF_FALSE0
(Math.Math._div$IF_FALSE0)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 16384
@16384
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math._div$lt_true.2
D;JLT
@SP
A=M-1
M=0
@Math.Math._div$lt_end.2
0;JMP
(Math.Math._div$lt_true.2)
@SP
A=M-1
M=-1
(Math.Math._div$lt_end.2)
// if-goto Math.Math._div$IF_TRUE1
@SP
AM=M-1
D=M
@Math.Math._div$IF_TRUE1
D;JNE
// goto Math.Math._div$IF_FALSE1
@Math.Math._div$IF_FALSE1
0;JMP
// label Math.Math._div$IF_TRUE1
(Math.Math._div$IF_TRUE1)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Math.Math._div 2
@Math.Math._div$ret.6
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math._div
0;JMP
(Math.Math._div$ret.6)
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto Math.Math._div$IF_END1
@Math.Math._div$IF_END1
0;JMP
// label Math.Math._div$IF_FALSE1
(Math.Math._div$IF_FALSE1)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Math.Math._div$IF_END1
(Math.Math._div$IF_END1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.Math.multiply 2
@Math.Math.multiply$ret.7
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math.multiply
0;JMP
(Math.Math.multiply$ret.7)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math._div$lt_true.3
D;JLT
@SP
A=M-1
M=0
@Math.Math._div$lt_end.3
0;JMP
(Math.Math._div$lt_true.3)
@SP
A=M-1
M=-1
(Math.Math._div$lt_end.3)
// if-goto Math.Math._div$IF_TRUE2
@SP
AM=M-1
D=M
@Math.Math._div$IF_TRUE2
D;JNE
// goto Math.Math._div$IF_FALSE2
@Math.Math._div$IF_FALSE2
0;JMP
// label Math.Math._div$IF_TRUE2
(Math.Math._div$IF_TRUE2)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// goto Math.Math._div$IF_END2
@Math.Math._div$IF_END2
0;JMP
// label Math.Math._div$IF_FALSE2
(Math.Math._div$IF_FALSE2)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// label Math.Math._div$IF_END2
(Math.Math._div$IF_END2)
// function Math.Math.sqrt 4
(Math.Math.sqrt)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math.sqrt$lt_true.1
D;JLT
@SP
A=M-1
M=0
@Math.Math.sqrt$lt_end.1
0;JMP
(Math.Math.sqrt$lt_true.1)
@SP
A=M-1
M=-1
(Math.Math.sqrt$lt_end.1)
// if-goto Math.Math.sqrt$IF_TRUE0
@SP
AM=M-1
D=M
@Math.Math.sqrt$IF_TRUE0
D;JNE
// goto Math.Math.sqrt$IF_FALSE0
@Math.Math.sqrt$IF_FALSE0
0;JMP
// label Math.Math.sqrt$IF_TRUE0
(Math.Math.sqrt$IF_TRUE0)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.Sys.error 1
@Math.Sys.error$ret.8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.Sys.error
0;JMP
(Math.Sys.error$ret.8)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// label Math.Math.sqrt$IF_FALSE0
(Math.Math.sqrt$IF_FALSE0)
// push constant 7
@7
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Math.Math.sqrt$WHILE_EXP0
(Math.Math.sqrt$WHILE_EXP0)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math.sqrt$lt_true.2
D;JLT
@SP
A=M-1
M=0
@Math.Math.sqrt$lt_end.2
0;JMP
(Math.Math.sqrt$lt_true.2)
@SP
A=M-1
M=-1
(Math.Math.sqrt$lt_end.2)
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto Math.Math.sqrt$WHILE_END0
@SP
AM=M-1
D=M
@Math.Math.sqrt$WHILE_END0
D;JNE
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 2
@2
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Math.Math.multiply 2
@Math.Math.multiply$ret.9
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math.multiply
0;JMP
(Math.Math.multiply$ret.9)
// pop local 3
@3
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math.sqrt$gt_true.3
D;JGT
@SP
A=M-1
M=0
@Math.Math.sqrt$gt_end.3
0;JMP
(Math.Math.sqrt$gt_true.3)
@SP
A=M-1
M=-1
(Math.Math.sqrt$gt_end.3)
// not
@SP
A=M-1
M=!M
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math.sqrt$gt_true.4
D;JGT
@SP
A=M-1
M=0
@Math.Math.sqrt$gt_end.4
0;JMP
(Math.Math.sqrt$gt_true.4)
@SP
A=M-1
M=-1
(Math.Math.sqrt$gt_end.4)
// and
@SP
AM=M-1
D=M
A=A-1
M=D&M
// if-goto Math.Math.sqrt$IF_TRUE1
@SP
AM=M-1
D=M
@Math.Math.sqrt$IF_TRUE1
D;JNE
// goto Math.Math.sqrt$IF_FALSE1
@Math.Math.sqrt$IF_FALSE1
0;JMP
// label Math.Math.sqrt$IF_TRUE1
(Math.Math.sqrt$IF_TRUE1)
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop local 1
@1
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Math.Math.sqrt$IF_FALSE1
(Math.Math.sqrt$IF_FALSE1)
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// goto Math.Math.sqrt$WHILE_EXP0
@Math.Math.sqrt$WHILE_EXP0
0;JMP
// label Math.Math.sqrt$WHILE_END0
(Math.Math.sqrt$WHILE_END0)
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Math.Math.abs 0
(Math.Math.abs)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math.abs$lt_true.1
D;JLT
@SP
A=M-1
M=0
@Math.Math.abs$lt_end.1
0;JMP
(Math.Math.abs$lt_true.1)
@SP
A=M-1
M=-1
(Math.Math.abs$lt_end.1)
// if-goto Math.Math.abs$IF_TRUE0
@SP
AM=M-1
D=M
@Math.Math.abs$IF_TRUE0
D;JNE
// goto Math.Math.abs$IF_FALSE0
@Math.Math.abs$IF_FALSE0
0;JMP
// label Math.Math.abs$IF_TRUE0
(Math.Math.abs$IF_TRUE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// goto Math.Math.abs$IF_END0
@Math.Math.abs$IF_END0
0;JMP
// label Math.Math.abs$IF_FALSE0
(Math.Math.abs$IF_FALSE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// label Math.Math.abs$IF_END0
(Math.Math.abs$IF_END0)
// function Math.Math.min 0
(Math.Math.min)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math.min$lt_true.1
D;JLT
@SP
A=M-1
M=0
@Math.Math.min$lt_end.1
0;JMP
(Math.Math.min$lt_true.1)
@SP
A=M-1
M=-1
(Math.Math.min$lt_end.1)
// if-goto Math.Math.min$IF_TRUE0
@SP
AM=M-1
D=M
@Math.Math.min$IF_TRUE0
D;JNE
// goto Math.Math.min$IF_FALSE0
@Math.Math.min$IF_FALSE0
0;JMP
// label Math.Math.min$IF_TRUE0
(Math.Math.min$IF_TRUE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// goto Math.Math.min$IF_END0
@Math.Math.min$IF_END0
0;JMP
// label Math.Math.min$IF_FALSE0
(Math.Math.min$IF_FALSE0)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// label Math.Math.min$IF_END0
(Math.Math.min$IF_END0)
// function Math.Math.max 0
(Math.Math.max)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Math.Math.max$gt_true.1
D;JGT
@SP
A=M-1
M=0
@Math.Math.max$gt_end.1
0;JMP
(Math.Math.max$gt_true.1)
@SP
A=M-1
M=-1
(Math.Math.max$gt_end.1)
// if-goto Math.Math.max$IF_TRUE0
@SP
AM=M-1
D=M
@Math.Math.max$IF_TRUE0
D;JNE
// goto Math.Math.max$IF_FALSE0
@Math.Math.max$IF_FALSE0
0;JMP
// label Math.Math.max$IF_TRUE0
(Math.Math.max$IF_TRUE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// goto Math.Math.max$IF_END0
@Math.Math.max$IF_END0
0;JMP
// label Math.Math.max$IF_FALSE0
(Math.Math.max$IF_FALSE0)
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// label Math.Math.max$IF_END0
(Math.Math.max$IF_END0)
// function Math.Math.getpowersOf2 0
(Math.Math.getpowersOf2)
// push static 0
@Math.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Array.Array.new 0
(Array.Array.new)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.alloc 1
@Array.Memory.alloc$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.alloc
0;JMP
(Array.Memory.alloc$ret.1)
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Array.Array.dispose 0
(Array.Array.dispose)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
AM=M-1
D=M
@THIS
M=D
// push pointer 0
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Memory.Memory.deAlloc 1
@Array.Memory.deAlloc$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.deAlloc
0;JMP
(Array.Memory.deAlloc$ret.2)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Main.Main.main 1
(Main.Main.main)
@SP
A=M
M=0
@SP
M=M+1
// push constant 32
@32
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Life.Life.new 1
@Main.Life.new$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Life.Life.new
0;JMP
(Main.Life.new$ret.1)
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// call Life.Life.run 1
@Main.Life.run$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Life.Life.run
0;JMP
(Main.Life.run$ret.2)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Keyboard.Keyboard.init 0
(Keyboard.Keyboard.init)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.Sys.init 0
(Sys.Sys.init)
// call Memory.Memory.init 0
@Sys.Memory.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.Memory.init
0;JMP
(Sys.Memory.init$ret.1)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// call Math.Math.init 0
@Sys.Math.init$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.Math.init
0;JMP
(Sys.Math.init$ret.2)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// call Main.Main.main 0
@Sys.Main.main$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.Main.main
0;JMP
(Sys.Main.main$ret.3)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// call Sys.Sys.halt 0
@Sys.Sys.halt$ret.4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.Sys.halt
0;JMP
(Sys.Sys.halt$ret.4)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.Sys.halt 0
(Sys.Sys.halt)
// label Sys.Sys.halt$WHILE_EXP0
(Sys.Sys.halt$WHILE_EXP0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
A=M-1
M=!M
// not
@SP
A=M-1
M=!M
// if-goto Sys.Sys.halt$WHILE_END0
@SP
AM=M-1
D=M
@Sys.Sys.halt$WHILE_END0
D;JNE
// goto Sys.Sys.halt$WHILE_EXP0
@Sys.Sys.halt$WHILE_EXP0
0;JMP
// label Sys.Sys.halt$WHILE_END0
(Sys.Sys.halt$WHILE_END0)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Sys.Sys.error 0
(Sys.Sys.error)
// call Sys.Sys.halt 0
@Sys.Sys.halt$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.Sys.halt
0;JMP
(Sys.Sys.halt$ret.5)
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.Output.init 0
(Output.Output.init)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.Output.printString 0
(Output.Output.printString)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Output.Output.printInt 0
(Output.Output.printInt)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Screen.Screen.init 0
(Screen.Screen.init)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.Memory.init 0
(Memory.Memory.init)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 0
@SP
AM=M-1
D=M
@Memory.0
M=D
// push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 1
@SP
AM=M-1
D=M
@Memory.1
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 1
@Memory.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 1
@Memory.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 14334
@14334
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 2
@SP
AM=M-1
D=M
@Memory.2
M=D
// push constant 2048
@2048
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop static 3
@SP
AM=M-1
D=M
@Memory.3
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.Memory.peek 0
(Memory.Memory.peek)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.Memory.poke 0
(Memory.Memory.poke)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 0
@Memory.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.Memory.alloc 3
(Memory.Memory.alloc)
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
@SP
A=M
M=0
@SP
M=M+1
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Memory.Memory.alloc$eq_true.1
D;JEQ
@SP
A=M-1
M=0
@Memory.Memory.alloc$eq_end.1
0;JMP
(Memory.Memory.alloc$eq_true.1)
@SP
A=M-1
M=-1
(Memory.Memory.alloc$eq_end.1)
// if-goto Memory.Memory.alloc$IF_TRUE0
@SP
AM=M-1
D=M
@Memory.Memory.alloc$IF_TRUE0
D;JNE
// goto Memory.Memory.alloc$IF_FALSE0
@Memory.Memory.alloc$IF_FALSE0
0;JMP
// label Memory.Memory.alloc$IF_TRUE0
(Memory.Memory.alloc$IF_TRUE0)
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop argument 0
@0
D=A
@ARG
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Memory.Memory.alloc$IF_FALSE0
(Memory.Memory.alloc$IF_FALSE0)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 2
@2
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// label Memory.Memory.alloc$WHILE_EXP0
(Memory.Memory.alloc$WHILE_EXP0)
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 2
@Memory.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@Memory.Memory.alloc$lt_true.2
D;JLT
@SP
A=M-1
M=0
@Memory.Memory.alloc$lt_end.2
0;JMP
(Memory.Memory.alloc$lt_true.2)
@SP
A=M-1
M=-1
(Memory.Memory.alloc$lt_end.2)
// not
@SP
A=M-1
M=!M
// if-goto Memory.Memory.alloc$WHILE_END0
@SP
AM=M-1
D=M
@Memory.Memory.alloc$WHILE_END0
D;JNE
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 2
@Memory.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// if-goto Memory.Memory.alloc$IF_TRUE1
@SP
AM=M-1
D=M
@Memory.Memory.alloc$IF_TRUE1
D;JNE
// goto Memory.Memory.alloc$IF_FALSE1
@Memory.Memory.alloc$IF_FALSE1
0;JMP
// label Memory.Memory.alloc$IF_TRUE1
(Memory.Memory.alloc$IF_TRUE1)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 2
@Memory.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop static 2
@SP
AM=M-1
D=M
@Memory.2
M=D
// goto Memory.Memory.alloc$IF_END1
@Memory.Memory.alloc$IF_END1
0;JMP
// label Memory.Memory.alloc$IF_FALSE1
(Memory.Memory.alloc$IF_FALSE1)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// label Memory.Memory.alloc$IF_END1
(Memory.Memory.alloc$IF_END1)
// goto Memory.Memory.alloc$WHILE_EXP0
@Memory.Memory.alloc$WHILE_EXP0
0;JMP
// label Memory.Memory.alloc$WHILE_END0
(Memory.Memory.alloc$WHILE_END0)
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 2
@Memory.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 2
@Memory.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static 2
@Memory.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 2
@Memory.2
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop local 0
@0
D=A
@LCL
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
A=M-1
M=-M
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static 1
@Memory.1
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop static 2
@SP
AM=M-1
D=M
@Memory.2
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
// function Memory.Memory.deAlloc 0
(Memory.Memory.deAlloc)
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 3
@Memory.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop static 3
@SP
AM=M-1
D=M
@Memory.3
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// push static 3
@Memory.3
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop temp 0
@SP
AM=M-1
D=M
@5
M=D
// pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
// push temp 0
@5
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
